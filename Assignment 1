Write a function so that the columns of the output matrix are powers of the input
vector.

The order of the powers is determined by the increasing boolean argument. Specifically,
when increasing is False, the i-th output column is the input vector raised element-wise
to the power of N - i - 1.

HINT: Such a matrix with a geometric progression in each row is named for Alexandre-
Theophile Vandermonde.

Solution:

Parameters:

    x : array_like
        1-D input array.
    N : int, optional
        Number of columns in the output.  If `N` is not specified, a square
        array is returned (``N = len(x)``).
    increasing : bool, optional
        Order of the powers of the columns.  If True, the powers increase
        from left to right, if False (the default) they are reversed.
        
Returns:

    out : ndarray
        Vandermonde matrix.  If `increasing` is False, the first column is
        ``x^(N-1)``, the second ``x^(N-2)`` and so forth. If `increasing` is
        True, the columns are ``x^0, x^1, ..., x^(N-1)``.
        
Examples:

1.

import numpy as np
x = np.array([1, 2, 3, 5])
N = 3
np.vander(x, N)

2.

np.column_stack([x**(N-1-i) for i in range(N)])

3.

x = np.array([1, 2, 3, 5])
np.vander(x)

4.

np.vander(x, increasing=True)

5.

np.linalg.det(np.vander(x))

6.

(5-3)*(5-2)*(5-1)*(3-2)*(3-1)*(2-1)
